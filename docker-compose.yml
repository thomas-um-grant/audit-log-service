version: '3'
services:
# RabbitMQ is the message broker in which the messages received at the api endpoint are queued
  rabbit:
    image: rabbitmq:3-management-alpine # Use the official rabbitmq image found on dockerhub
    hostname: rabbit # Set the hostname to be used by other containers
    ports:
      - "5672:5672" # Forward the host port to the docker image port to be used, keeping the default one here# OPTIONAL: Expose the GUI port
      - 15672:15672 # This is the GUI port, optional, but nice to see what's going on
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit_user # Set the username to connect to rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbit_pass # Set the password to connect to rabbitmq
    restart: unless-stopped # Always restarts the container, except when the container is stopped (manually or otherwise)
  
  # MongoDB is the database where the messages (events) will be stored
  db:
    image: mongo # Use the official mongodb image found on dockerhub
    hostname: mongo # Set the hostname to be used by other containers
    ports:
      - 27017:27017 # Forward the host port to the docker image port to be used, keeping the default one here
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo_user # Set the username to connect to rabbitmq
      - MONGO_INITDB_ROOT_PASSWORD=mongo_pass # Set the password to connect to rabbitmq
    volumes: 
      - mongodb:/data/db # Forwarding container volumes into host machine folder to ensure data resilience if the container is stopped
    restart: unless-stopped # Always restarts the container, except when the container is stopped (manually or otherwise)

  # The API use the Flask framework to receive and manage GET and POST requests
  api:
    build:
      context: ./api # The API dockerfile is located in the /api folder
      dockerfile: Dockerfile # The dockerfile is named Dockerfile
    #command: ../scripts/run_api.sh # Runs this bash code to start the api
    ports:
      - 5000:5000 # Forward the host port to the docker image port to be used, keeping the same one here
    depends_on: # depends_on starts and stops services in dependency order
      - rabbit # depends on rabbit, so will be started after rabbit
      - db # depends on db, so will be started after db
    environment:
      - SECRET_KEY=9x2-NtyZJJ6EioDf
      - CANONICAL_USER=canonical_user
      - CANONICAL_PASS=canonical_pass
      - RABBITMQ_HOST=amqp://rabbit_user:rabbit_pass@rabbit:5672 # Set the environment variable hostname to connect to rabbitmq
      - MONGODB_HOST=mongodb://mongo_user:mongo_pass@db:27017 # Set the environment variable hostname to connect to mongodb
    # volumes:
    #   - .:/api # Place this image under the /api folder
    #restart: unless-stopped # Always restarts the container, except when the container is stopped (manually or otherwise)

  # The worker use Celery to consume messages from RAbbitMQ and store them into the MongoDB database
  worker:
    build:
      context: ./worker # The Worker dockerfile is located in the /worker folder
      dockerfile: Dockerfile # The dockerfile is named Dockerfile
    #command: ../worker/run_worker.sh # Runs this script to start the worker
    depends_on: # depends_on starts and stops services in dependency order
      - rabbit # depends on rabbit, so will be started after rabbit
      - db # depends on db, so will be started after db
    environment:
      - RABBITMQ_HOST=amqp://rabbit_user:rabbit_pass@rabbit:5672 # Set the environment variable hostname to connect to rabbitmq
      - MONGODB_HOST=mongodb://mongo_user:mongo_pass@db:27017 # Set the environment variable hostname to connect to mongodb
    # volumes:
    #   - .:/worker # Place this image under the /worker folder
    #restart: unless-stopped # Always restarts the container, except when the container is stopped (manually or otherwise)

volumes:
  mongodb: # The volume that will be created and synced with the host machine

# Note: No needs to specify the network for each container to communicate, Docker creates a default one "myapp_default",
#       and the name of each container can be used as hostnames: https://docs.docker.com/compose/networking/